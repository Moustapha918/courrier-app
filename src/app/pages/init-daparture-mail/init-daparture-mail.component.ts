import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';
import {FormBuilder, FormControl, FormGroup, ValidationErrors, Validators} from '@angular/forms';
import {Subject} from 'rxjs';
import {MatDialog, MatDialogRef} from '@angular/material/dialog';
import {InitMailService} from '../../services/init-mail.service';
import {ActivatedRoute, Router} from '@angular/router';
import {NotificationService} from '../../services/notification.service';
import {LoadingService} from '../../services/loading.service';
import {ReferentialService} from '../../services/referential.service';
import {AuthService} from '../../services/auth.service';
import {DateAdapter} from '@angular/material/core';
import {DialogModel} from '../confirm-dialog/confirm-dialog.component';
import {ErrorDilaogComponent} from '../error-dilaog/error-dilaog.component';
import {SpinnerModalComponent} from '../spinner-modal/spinner-modal.component';
import {FileItem, FileUploader, ParsedResponseHeaders} from 'ng2-file-upload';
import {map, startWith} from 'rxjs/operators';

@Component({
  selector: 'app-init-daparture-mail',
  templateUrl: './init-daparture-mail.component.html',
  styleUrls: ['./init-daparture-mail.component.scss']
})
export class InitDapartureMAilComponent implements OnInit {

    // @ts-ignore
    @ViewChild('fileInput') fileInput: ElementRef;

    uploader: FileUploader;


    form: FormGroup;
    scanFileName: string;
    uploadFileMessage: string;
    listDirectories: string[] = [];
    autoDirectory: string;
    responseDirectory: string;
    filteredOptions: any;


    private _unsubscribeAll: Subject<any>;
    constructor(
        public dialog: MatDialog,
        private _formBuilder: FormBuilder,
        private initMailService: InitMailService,
        private router: Router,
        private notifyService: NotificationService,
        private activatedRoute: ActivatedRoute,
        private loadingService: LoadingService,
        private referentialService: ReferentialService,
        private notificationService: NotificationService,
        public auth: AuthService,
        private route: ActivatedRoute,
        private dateAdapter: DateAdapter<Date>
    ) {
        this._unsubscribeAll = new Subject();
        this.dateAdapter.setLocale('fr');
    }

  ngOnInit(): void{
      this.activatedRoute.params
          .subscribe(params => {
              // Defaults to 0 if no query param provided.
              this.responseDirectory = params.id;
              console.log(params);
          });


      this.form = this._formBuilder.group({
          departureDate: [
              {
                  value: '',
                  disabled: true
              }, Validators.required
          ],
          idDirectory: [
              Validators.required,
              this.requireMatch.bind(this)
          ],
          idEntry: [{
              value: '',
              disabled: true
          }, Validators.required
          ],
          subject: ['', Validators.required],
          receiver: ['', Validators.required],
          attachments: [],
          ampliations: [],
          observations: [],
          inputScanFile: ['', Validators.required],
          idScanFile: [],
      });

      this.initMailService.getAutoGeneratedParamsDepartureFromBackend()
          .subscribe(
              (autoGeneratedParams) => {
                  if (this.responseDirectory !== undefined && this.responseDirectory !== null ){

                      this.form.controls['idDirectory'].setValue(this.responseDirectory);
                      this.form.controls['idDirectory'].disable();
                  }
                  else{
                      this.form.controls['idDirectory'].setValue(autoGeneratedParams.idDirectory);
                      this.listDirectories = autoGeneratedParams.listDirectories;
                      this.autoDirectory = autoGeneratedParams.idDirectory;
                      this.listDirectories.unshift(autoGeneratedParams.idDirectory);
                      this.filteredOptions = this.form.controls['idDirectory'].valueChanges
                          .pipe(
                              startWith(''),
                              map(value => this._filterDirectory(value))
                          );
                  }

                  this.form.controls['departureDate'].setValue(autoGeneratedParams.receptionDate);
                  this.form.controls['idEntry'].setValue(autoGeneratedParams.idEntry);
                  // console.log(this.form.getRawValue());
              },
              (error) => {
                  console.log('Error ! : ' + error);
                  const message = 'une erreur technique est survenue.  Veuillez réessayer ultérieurement';
                  const dialogData = new DialogModel('title', message);
                  const dialogRefError = this.dialog.open(ErrorDilaogComponent, {
                      width: '600px',
                      data: dialogData,
                  });
                  dialogRefError.afterClosed();
              }
          );

  }

    // tslint:disable-next-line:use-lifecycle-interface
    ngOnDestroy(): void {
        // Unsubscribe from all subscriptions
        this._unsubscribeAll.next();
        this._unsubscribeAll.complete();
    }

    uploadScanFile(): void {
        let refDialog: MatDialogRef<SpinnerModalComponent, any>;
        this.fileInput.nativeElement.click();


        const headers = [{name: 'Accept', value: 'application/json'},
            {name: 'Authorization', value:  `Bearer ${this.auth.getToken()}`}];
        this.uploader = new FileUploader({url: this.initMailService.uploadScanFileDepartureURI + '/'
                + this.form.controls['idDirectory'].value + '/'
                + this.form.controls['idEntry'].value, allowedMimeType: ['application/pdf'],
            autoUpload: true, headers: headers});

        this.uploader.onAfterAddingFile = item => { // to allow cross origin
            item.withCredentials = false;
            console.log('onAfterAddingFile');
            refDialog = this.loadingService.displaySpinner();
        };
        this.uploader.onCompleteAll = () =>  {
            console.log('onCompleteAll');
        };

        this.uploader.onWhenAddingFileFailed = message => {
            console.log('onWhenAddingFileFailed', message);
            const errorMessage = 'format de fichier invalide';
            const dialogData = new DialogModel('Erreur', errorMessage);
            const dialogRefError = this.dialog.open(ErrorDilaogComponent, {
                width: '600px',
                data: dialogData
            });
            dialogRefError.afterClosed().subscribe(result => {

            });
        };

        this.uploader.onSuccessItem = (item: FileItem, idScanFile: string, status: number) => {
            if (status === 200){
                this.scanFileName = this.fileInput.nativeElement.files[0].name;
                this.uploadFileMessage = 'Fichier chargé: ' + this.scanFileName;
                this.notifyService.openSnackBar('le fichier a été chargé avec succès', 'Notification');
                // alert('le fichier a été chargé avec succès');
            }
            else{
                this.uploadFileMessage = 'Le fichier n\'a pas été charger, Veuillez réessayer';

                this.notifyService.openSnackBar('erreur du téléchargement du fichier', 'Notification');
                const message = 'une erreur technique est survenue.  Veuillez réessayer ultérieurement';
                const dialogData = new DialogModel('title', message);
                const dialogRefError = this.dialog.open(ErrorDilaogComponent, {
                    width: '600px',
                    data: dialogData,
                });
                dialogRefError.afterClosed().subscribe(result => {
                    if (result === true) {
                    }
                });
            }
            this.uploader.onErrorItem = (errorItem: FileItem, errorIdScanFile: string, errorStatus: number, errorHeaders: ParsedResponseHeaders) => {
                if (status === 404){
                    const message = 'Le fichier est introuvable.  Veuillez réessayer ultérieurement';
                    const dialogData = new DialogModel('title', message);
                    const dialogRefError = this.dialog.open(ErrorDilaogComponent, {
                        width: '600px',
                        data: dialogData
                    });
                    dialogRefError.afterClosed().subscribe(result => {
                        if (result === true) {
                        }
                    });
                }
                else{

                    const message = 'une erreur technique est survenue lors du chargement du fichier.  Veuillez réessayer ultérieurement';
                    const dialogData = new DialogModel('title', message);
                    const dialogRefError = this.dialog.open(ErrorDilaogComponent, {
                        width: '600px',
                        data: dialogData
                    });
                    dialogRefError.afterClosed().subscribe(result => {
                        if (result === true) {
                        }
                    });
                }
            };


            if (refDialog){
                refDialog.close();
            }
            this.form.controls['idScanFile'].setValue(idScanFile);
        };
    }

    private _filterDirectory(value: string): string[] {
        const filterValue = value.toLowerCase();
        return this.listDirectories.filter(option => option.toLowerCase().includes(filterValue));
    }

    private requireMatch(control: FormControl): ValidationErrors | null {
        const selection: any = control.value;
        if (this.listDirectories && this.listDirectories.indexOf(selection) < 0) {
            return { requireMatch: true };
        }
        return null;
    }

    validateDepartureMail(): void {

        console.log(this.form.getRawValue());
        const refDialog = this.loadingService.displaySpinner();

        this.initMailService.sendDepartureMailFormToBackend(this.form.getRawValue())
            .subscribe(
                () => {
                    this.router.navigate(['../departureMail-sc'], { relativeTo: this.activatedRoute });
                    refDialog.close();
                },
                (error) => {
                    refDialog.close();
                    this.notificationService.openSnackBar('Unne Erreur est survenu lors de la création du courrier', 'close');
                    const message = 'une erreur technique est survenue.  Veuillez réessayer ultérieurement';
                    const dialogData = new DialogModel('title', message);
                    const dialogRefError = this.dialog.open(ErrorDilaogComponent, {
                        width: '600px',
                        data: dialogData
                    });
                    dialogRefError.afterClosed().subscribe(result => {

                    });
                });
    }



}
