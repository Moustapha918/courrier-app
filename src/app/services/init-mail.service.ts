import {Injectable} from '@angular/core';
import {HttpClient, HttpHeaders} from '@angular/common/http';
import {AutoGenParamsModel} from '../models/auto-gen-params.model';
import {BehaviorSubject, Observable, Subject} from 'rxjs';
import {environment} from '../../environments/environment';
import {ArrivedMailModelModel} from '../models/arrived-mail.model';
import {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from '@angular/router';

@Injectable()
export class InitMailService implements Resolve<any>{

    autoGeneratedFieldsURI = environment.backendUrl + '/mailing/arrived/auto-gen-params';
    addNewArrivedMailURI = environment.backendUrl + '/mailing/arrived/add/new';
    getAllArrivedMAilsURI = environment.backendUrl + '/mailing/arrived/all';

    arrivedMails: ArrivedMailModelModel[];
    onarrivedMailsChanged: BehaviorSubject<any>;

    constructor(private httpClient: HttpClient){

        this.onarrivedMailsChanged = new BehaviorSubject<any>({});
    }

    getAutoGeneratedParamsFromBackend(): Observable<AutoGenParamsModel> {
        return this.httpClient
            .get<AutoGenParamsModel>(this.autoGeneratedFieldsURI);
    }

    sendArrivedMailFormToBackend(arrivedMail: ArrivedMailModelModel): Observable<any> {
        return this.httpClient
            .post<any>(this.addNewArrivedMailURI, arrivedMail);
    }

    getAllArrivedMailsFromBackend(): Observable<ArrivedMailModelModel[]> {

        if (!this.arrivedMails ){

        }
        return this.httpClient
            .get<ArrivedMailModelModel[]>(this.getAllArrivedMAilsURI) ;
    }


    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> | Promise<any> | any
    {

        console.log('resolve --------------------')
        return new Promise((resolve, reject) => {

            Promise.all([
                this.getArrivedMails()
            ]).then(
                () => {
                    resolve();
                },
                reject
            );
        });
    }

    /**
     * Get products
     *
     * @returns {Promise<any>}
     */
    getArrivedMails(): Promise<any>
    {
        return new Promise((resolve, reject) => {
            this.httpClient.get<ArrivedMailModelModel[]>(this.getAllArrivedMAilsURI)
                .subscribe((response: any) => {
                    this.arrivedMails = response;
                    console.log('this.arrivedMails from service', this.arrivedMails)
                    this.onarrivedMailsChanged.next(this.arrivedMails);

                    resolve(response);
                }, reject);
        });
    }

}


